#!/usr/bin/env perl
use strict;
use warnings;
use Pod::Usage qw< pod2usage >;
use Getopt::Long qw< :config gnu_getopt >;
use English qw< -no_match_vars >;
my $VERSION = '0.0.1';
use POSIX ();
use Cwd qw< realpath >;
use File::Basename qw< dirname >;

use Log::Log4perl::Tiny qw< :easy LOGLEVEL get_logger >;
Log::Log4perl->easy_init({ level => $INFO });

my %config = (
   append => 1,
   exit_code => 100,
   loglevel => 'INFO',
   stderr => '/dev/null',
   stdout => '/dev/null',
   throttle => 1,
   timeout => undef,
   umask  => '077',
);
GetOptions(
   \%config,
   qw<
     usage! help! man! version!
     append!
     dir|d=s
     exit_code|exit-code|c=i
     loglevel|log|l=s
     outputs|O=s
     pidfile|p=s
     stderr|err|e=s
     stdout|out|o=s
     throttle|T=s
     timeout|t=i
     umask|u=s
     >
) or pod2usage(-verbose => 99, -sections => 'USAGE');
pod2usage(message => "$0 $VERSION", -verbose => 99, -sections => ' ')
  if $config{version};
pod2usage(-verbose => 99, -sections => 'USAGE') if $config{usage};
pod2usage(-verbose => 99, -sections => 'USAGE|EXAMPLES|OPTIONS')
  if $config{help};
pod2usage(-verbose => 2) if $config{man};

# Script implementation here
LOGLEVEL($config{loglevel});
$config{stderr} = $config{stdout} = $config{outputs}
  if exists $config{outputs};

# daemonize
isolate();
save_pidfile();
initialize_filehandles();

# supervise
supervise();

# never reached really
exit 0;

sub isolate {
   # get into target directory
   if (exists $config{dir}) {
      chdir $config{dir}
         or LOGDIE "chdir(): $OS_ERROR";
   }

   # (re)set umask
   umask oct($config{umask})
      or LOGDIE "umask(): $OS_ERROR";

   $SIG{HUP} = 'IGNORE';
   exit if myfork();

   # Intermediate child becomes session leader. This will detach from TTY
   POSIX::setsid();

   # Now fork() again so that we're no session leader any more. There will
   # be no means to get the TTY again now
   exit if myfork();
}

sub save_pidfile {
   if (exists $config{pidfile}) {
      open my $fh, '>', $config{pidfile}
         or LOGDIE "open('$config{pidfile}'): $OS_ERROR";
      print {$fh} $PID or LOGDIE "print(): $OS_ERROR";
      close $fh or LOGDIE "close(): $OS_ERROR";
   }
}

sub initialize_filehandles {
   my $max = POSIX::sysconf(&POSIX::_SC_OPEN_MAX) || 64;
   $max = 64 if $max < 0;
   POSIX::close($_) for 3 .. $max;

   close STDIN;
   open STDIN, '<', '/dev/null'
      or LOGDIE "open(): $OS_ERROR\n";

   reopen_outputs();
}

sub reopen_outputs {
   my $mode = $config{append} ? '>>' : '>';

   close STDOUT;
   open STDOUT, $mode, $config{stdout}
      or LOGDIE "open(): $OS_ERROR\n";

   # die()-ing after STDERR has been closed does not carry any message
   close STDERR;
   if ($config{stderr} eq $config{stdout}) {
      open STDERR, '>&', \*STDOUT
         or die '';
   }
   else {
      open STDERR, $mode, $config{stderr}
         or die '';
   }

   # now stderr has been reset... ensure the logger knows it
   get_logger()->fh(\*STDERR);
}

sub supervise {
   my $pid;
   local $SIG{HUP} = sub {
      kill 'HUP', $pid;
      reopen_outputs();
   };

   my $exit;
   local $SIG{TERM} = sub {
      $exit = 1;
      kill 'TERM', $pid;
      alarm $config{timeout} if $config{timeout};
   };

   my $killed;
   local $SIG{ALRM} = sub {
      $killed = 1;
      kill 'KILL', $pid;
   };

   my $aborted;
   local $SIG{ABRT} = sub {
      $exit = $aborted = 1;
   };

   my $epid;
   while (! $exit) {
      my $start = time();
      $pid = mysystem(@ARGV)
         if (! defined $pid) || ($pid eq $epid);
      $epid = wait();

      if ($epid == $pid) {
         my $exit_code = $CHILD_ERROR >> 8;
         myexit("child exited with code $config{exit_code}, exiting", 0)
            if $exit_code == $config{exit_code};
      }

      my $execution_time = time() - $start;
      my $sleep_time = $config{throttle} - $execution_time;
      sleep $sleep_time if $sleep_time > 0;
   }

   myexit('could not exec in child, aborting', 1)
      if $aborted;
   myexit('child terminated after hard kill, exiting', 1)
      if $killed;
   myexit('child terminated normally, exiting', 0)
      if $pid == $epid;
   myexit('child did not terminate, exiting', 2);
}

sub myexit {
   my ($message, $exit_code) = @_;
   WARN "$message";
   unlink $config{pidfile} if exists $config{pidfile};
   exit $exit_code;
}

sub mysystem {
   my ($command, @args) = @_;

   my $parent_pid = $PID;
   if (my $pid = myfork()) {
      return $pid;
   }

   WARN "Starting: $command @args";
   { exec {$command} $command, @args } # disable warning
   kill 'ABRT', $parent_pid;
   exit 1;
}

sub myfork {
   defined(my $child = fork())
      or LOGDIE "fork(): $OS_ERROR\n";
   return $child;
}

__END__

=head1 NAME

daemovise - supervise from a daemon

=head1 VERSION

Ask the version number to the script itself, calling:

   shell$ daemovise --version


=head1 USAGE

   daemovise [--usage] [--help] [--man] [--version]

   daemovise [--append|--no-append]
             [--dir|-d directory]
             [--exit-code|-c code]
             [--outputs|O filename]
             [--pidfile|-p filename]
             [--stderr|--err|-e filename]
             [--stdout|--out|-o filename]
             [--throttle|-T time]
             [--timeout|-t timeout]
             [--umask|-u umask]
             [--] command [arg [arg...]]

=head1 EXAMPLES

   # write both stdout and stderr in sample.log
   # save PID in sample.pid for later reuse (sending commands)
   # set a timeout of 10 seconds for child to honor a TERM request
   shell$ daemovise -O sample.log -p sample.pid ./sample.sh -t 10
   
   # send HUP, this makes it possible to e.g. rotate logs.
   # HUP signal is propagated down to child, if it does not handle it
   # then it will exit and will be restarted by daemovise
   shell$ mv sample.log sample.log.1
   shell$ kill -HUP $(<sample.pid)

   # send TERM and then KILL after the timeout
   shell$ kill $(<sample.pid)

=head1 DESCRIPTION

This program starts as a daemon and takes care to supervise the execution
of a child program.

When starting, daemovise will generate a daemon with the following
characteristics:

=over

=item *

change directory in what configured for C<--dir> (if this is not set,
this step is skipped)

=item *

reset the C<umask> to whatever set via C<--umask> (that is C<077> by
default)

=item *

C<fork()> twice with C<POSIX::setsid()> in between, so that the process
is properly detached from the TTY and will not be able to gain control
of a TTY again

=item *

close all filehandles, then reopen stdin to read from C</dev/null> and
stdout/stderr to write to whatever configured (see options
C<--stdout>, C<--stderr> and C<--outputs>)

=back

After starting as a daemon as described above, daemovise repeatedly
runs the child program provided on the command line until an exit
condition is triggered.

It is possible to definitely terminate the process (both daemovise and
the child in current execution) by sending a TERM signal to daemovise. In
this case, daemovise will first send the TERM signal, then if a timeout is
set it will send a KILL signal if the child did not terminate after the
timeout itself.

It is also possible to send the HUP signal to daemovise. This signal will
be forwarded to the child too (this usually means that the child will
exit, unless the signal is properly trapped) and the output channels will
be reopened too. This makes it possible to use e.g. C<logrotate> in order
to avoid log files filling up the whole filesystem.


=head1 OPTIONS

=over

=item --append | --no-append

by default, output files for stdout and stderr are opened in append
mode. If you want to create a new file instead, pass C<--no-append>.

=item --dir | -d directory

set the directory where to C<chdir> before starting all operations. All
relative paths are meant to be referred to this directory.

=item --exit-code | -c code

set a special I<exit code> that, when used by the child, will make the
supervision stop. This allows deciding when to stop the execution from
within the child.

By default it is set to 100.

=item --help

print a somewhat more verbose help, showing usage, this description of
the options and some examples from the synopsis.

=item --man

print out the full documentation for the script.

=item --outputs | -O filename

set an output filename for both stdout and stderr. This option overrides
whatever is set for C<--stdout> and C<--stderr>.

=item --pidfile | -p filename

save the process identifier (PID) of the daemovise process in the
specified filename. This will make it easier to interact with
daemovise in a later stage.

=item --stderr | --err | -e filename

=item --stdout | --out | -o filename

set the name for respectively the stderr and stdout channels. If set to
the same value (e.g. via C<--outputs>) only the new stdout will be opened,
and stderr will be duplicated.

=item --throttle | -T time

throttle child re-spawning by C<time> seconds. In this way, you can avoid
re-spawning a child too fast if there are errors that prevent the child
from executing successfully (e.g. misconfigurations).

Defaults to 1.

=item --timeout | -t timeout

set a timeout for the child to honor the C<TERM> signal. If the child does
not exit within the timeout, a C<KILL> signal will be sent.

=item --umask | -u umask

set the new C<umask> for file creation. By default it is C<077>, i.e. files
are created by default to be read/written/executed by the owner only.

=item --usage

print a concise usage line and exit.

=item --version

print the version of the script.

=back

Considering that the executed child program might have its own options too,
it is suggested to always terminate the command line options for daemovise
with C<-->, so that the options analyzer will stop interpreting further
in the command line.


=head1 DIAGNOSTICS

Whatever operation that fails is usually fatal.

=head1 CONFIGURATION AND ENVIRONMENT

daemovise requires no configuration files or environment variables.


=head1 DEPENDENCIES

None.


=head1 BUGS AND LIMITATIONS

No bugs have been reported.

Please report any bugs or feature requests through http://rt.cpan.org/


=head1 AUTHOR

Flavio Poletti C<polettix@cpan.org>


=head1 LICENSE AND COPYRIGHT

Copyright (c) 2015, Flavio Poletti C<polettix@cpan.org>.

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
